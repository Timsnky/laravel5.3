{"version":3,"sources":["responsive-tables.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"responsive-tables.min.js","sourcesContent":["$(document).ready(function() {\n  var switched = false;\n  var updateTables = function() {\n    if (($(window).width() < 767) && !switched ){\n      switched = true;\n      $(\"table.responsive\").each(function(i, element) {\n        splitTable($(element));\n      });\n      return true;\n    }\n    else if (switched && ($(window).width() > 767)) {\n      switched = false;\n      $(\"table.responsive\").each(function(i, element) {\n        unsplitTable($(element));\n      });\n    }\n  };\n   \n  $(window).load(updateTables);\n  $(window).on(\"redraw\",function(){switched=false;updateTables();}); // An event to listen for\n  $(window).on(\"resize\", updateTables);\n   \n\t\n\tfunction splitTable(original)\n\t{\n\t\toriginal.wrap(\"<div class='table-wrapper' />\");\n\t\t\n\t\tvar copy = original.clone();\n\t\tcopy.find(\"td:not(:first-child), th:not(:first-child)\").css(\"display\", \"none\");\n\t\tcopy.removeClass(\"responsive\");\n\t\t\n\t\toriginal.closest(\".table-wrapper\").append(copy);\n\t\tcopy.wrap(\"<div class='pinned' />\");\n\t\toriginal.wrap(\"<div class='scrollable' />\");\n\n    setCellHeights(original, copy);\n\t}\n\t\n\tfunction unsplitTable(original) {\n    original.closest(\".table-wrapper\").find(\".pinned\").remove();\n    original.unwrap();\n    original.unwrap();\n\t}\n\n  function setCellHeights(original, copy) {\n    var tr = original.find('tr'),\n        tr_copy = copy.find('tr'),\n        heights = [];\n\n    tr.each(function (index) {\n      var self = $(this),\n          tx = self.find('th, td');\n\n      tx.each(function () {\n        var height = $(this).outerHeight(true);\n        heights[index] = heights[index] || 0;\n        if (height > heights[index]) heights[index] = height;\n      });\n\n    });\n\n    tr_copy.each(function (index) {\n      $(this).height(heights[index]);\n    });\n  }\n\n});\n"]}